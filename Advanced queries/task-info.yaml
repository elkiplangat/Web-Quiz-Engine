type: edu
custom_name: stage6
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 0,1),
            () -> testAllQuizzes(0, 0,2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 0,1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 0,2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),
            () -> testCompletedQuizzesNoAuth(),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),
            () -> testCompletedQuizzesFakeAuth(),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 2),


            // Check completed
            () -> testCompletedQuizzes(1, 1, 0 ,0, quizIds[0]),
            () -> testCompletedQuizzes(1, 2, 0, 0, quizIds[1]),


            // Test database save
            () -> testAllQuizzes(2, 0, 1),
            () -> testAllQuizzes(2, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 0,1),
            () -> testAllQuizzes(2, 0,2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 2),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),


            // Check completed
            () -> testCompletedQuizzes(2, 1, 0 ,1, quizIds[0]),
            () -> testCompletedQuizzes(2, 1, 0 ,0, quizIds[1]),

            () -> testCompletedQuizzes(2, 2, 0, 1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 0, 0, quizIds[0]),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 0,2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 0,2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Check completed
            () -> testCompletedQuizzes(5, 1, 0 ,4, quizIds[0]),
            () -> testCompletedQuizzes(5, 1, 0 ,3, quizIds[1]),
            () -> testCompletedQuizzes(5, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(5, 1, 0 ,1, quizIds[5]),
            () -> testCompletedQuizzes(5, 1, 0 ,0, quizIds[5]),

            () -> testCompletedQuizzes(6, 2, 0, 5, quizIds[1]),
            () -> testCompletedQuizzes(6, 2, 0, 4, quizIds[0]),
            () -> testCompletedQuizzes(6, 2, 0, 3, quizIds[2]),
            () -> testCompletedQuizzes(6, 2, 0, 2, quizIds[3]),
            () -> testCompletedQuizzes(6, 2, 0, 1, quizIds[6]),
            () -> testCompletedQuizzes(6, 2, 0, 0, quizIds[6]),


            // Test pagination completed quizzes
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 1),

            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 2),

            () -> testCompletedQuizzes(10, 1, 0 ,0, quizIds[6]),
            () -> testCompletedQuizzes(10, 1, 0 ,1, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,2, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,3, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,4, quizIds[4]),
            () -> testCompletedQuizzes(10, 1, 0 ,5, quizIds[4]),
            () -> testCompletedQuizzes(1, 1, 1 ,0, quizIds[0]),

            () -> testCompletedQuizzes(10, 2, 0 ,0, quizIds[5]),
            () -> testCompletedQuizzes(10, 2, 0 ,1, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,2, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,3, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,4, quizIds[3]),
            () -> testCompletedQuizzes(10, 2, 0 ,5, quizIds[3]),
            () -> testCompletedQuizzes(2, 2, 1 ,1, quizIds[1]),
            () -> testCompletedQuizzes(2, 2, 1 ,0, quizIds[0]),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 0,1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 0,2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),


            // Test pagination all quizzes
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testCreateQuiz(6, 1),
            () -> testCreateQuiz(6, 2),
            () -> testAllQuizzes(10, 0,1),
            () -> testAllQuizzes(10, 0,2),
            () -> testAllQuizzes(5, 1,1),
            () -> testAllQuizzes(5, 1,2),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpRequest req = post(url, getPrettyJson(json));
            HttpResponse resp = req.send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesNoAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzesFakeAuth() {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "0");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int page, int user) {
            String url = "/api/quizzes";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content", isArray(count, isObject()
                        .value("id", isInteger())
                        .value("title", isString())
                        .value("text", isString())
                        .value("options", isArray(any()))
                    ))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testCompletedQuizzes(int count, int user, int page, int indexForCheckingQuizId, int quizNum) {
            String url = "/api/quizzes/completed";
            HttpRequest req = get(url).addParam("page", "" + page);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("content",
                        isArray(count,
                            isObject()
                                .value("id", isInteger())
                                .value("completedAt", isString()))

                            .item(indexForCheckingQuizId,
                                isObject()
                                    .value("id", quizNum)
                                    .value("completedAt", isString()))
                    )
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage(), ex);
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/engine/UserDetailsImpl.java
  visible: true
  text: |
    package engine;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import java.util.Collection;
    import java.util.Collections;

    public class UserDetailsImpl implements UserDetails {

        private final String userName;
        private final String passWord;
        private final User user;

        public UserDetailsImpl(User user) {
            this.user = user;
            this.userName = user.getEmail();
            this.passWord = user.getPassword();
        }


        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {

            return Collections.singletonList(new SimpleGrantedAuthority("role"));
        }
        public User getUser() {
            return user;
        }

        @Override
        public String getPassword() {
            return passWord;
        }

        @Override
        public String getUsername() {
            return userName;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/engine/QuizService.java
  visible: true
  text: |
    package engine;

    import java.util.HashMap;

    public interface QuizService{
        HashMap<String, Object> getQuizzes(int pageNo);
        Quiz getQuizById(int id);
        void insert(Quiz quiz, User user);

        void deleteQuiz(int id, String username) throws IllegalAccessException;
    }
  learner_created: true
- name: src/engine/UserDetailsServiceImpl.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        @Autowired
        private UserRepository userRepository;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException{
            var currentUser = userRepository.findByEmail(username);
            currentUser.orElseThrow(()->new UsernameNotFoundException("Username not found"));
            return new UserDetailsImpl(currentUser.get());
        }

    }
  learner_created: true
- name: src/engine/CompletedService.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.jpa.repository.Query;

    import java.util.HashMap;
    import java.util.List;

    public interface CompletedService {

        HashMap<String, Object> getCompleted(int pageNo, Long userId);

        void insert(Completed completed, Long userId);

        void deleteCompleted(int id, String userId) throws IllegalAccessException;

    }
  learner_created: true
- name: src/engine/CompletedServiceImpl.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.beans.support.PagedListHolder;
    import org.springframework.data.domain.Page;
    import org.springframework.data.domain.PageRequest;
    import org.springframework.data.domain.Pageable;
    import org.springframework.data.jpa.repository.Query;

    import java.util.HashMap;
    import java.util.List;

    public class CompletedServiceImpl implements CompletedService{

        private final CompletedRepository completedRepository;

        public CompletedServiceImpl(@Autowired CompletedRepository completedRepository) {
            this.completedRepository = completedRepository;
        }


        public List<Completed> findByUserId(Long userId) {
            return completedRepository.findByUserId(userId);
        }

        @Override
        public HashMap<String, Object> getCompleted(int pageNo, Long userId) {
          List<Completed> completed = completedRepository.findByUserId(userId);
            PagedListHolder page  = new PagedListHolder(completed);
            page.setPageSize(10);
            page.setPage(pageNo);

            HashMap<String, Object> hashMap = new HashMap<>();
            if (page.getNrOfElements() > 0){
                hashMap.put("totalPages", page.getPageCount());
                hashMap.put("totalElements", completed.size());
                hashMap.put("last", page.isLastPage());
                hashMap.put("first", page.isFirstPage());
                hashMap.put("content", page.getPageList());

            }
            return hashMap;
        }

        @Override
        public void insert(Completed completed, Long userId) {

        }

        @Override
        public void deleteCompleted(int id, String userId) throws IllegalAccessException {

        }
    }
  learner_created: true
- name: src/engine/QuizServiceImpl.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.data.domain.Page;
    import org.springframework.data.domain.PageRequest;
    import org.springframework.data.domain.Pageable;
    import org.springframework.stereotype.Service;

    import java.util.HashMap;

    @Service
    public class QuizServiceImpl implements QuizService{
        private final QuizRepository quizRepository;

        public QuizServiceImpl(@Autowired QuizRepository quizRepository) {
            this.quizRepository = quizRepository;
        }

        @Override
        public HashMap<String, Object> getQuizzes(int pageNo) {
            Pageable paging = PageRequest.of(pageNo, 10);

            Page<Quiz> pagedResult = quizRepository.findAll(paging);
            if (pagedResult.hasContent()){
                HashMap<String, Object> content = new HashMap<>();
                content.put("totalPages",pagedResult.getTotalPages());
                content.put("totalElements",pagedResult.getTotalElements());
                content.put("last",pagedResult.isLast());
                content.put("first",pagedResult.isFirst());
                content.put("sort", new int[]{});
                content.put("number", pageNo);
                content.put("numberOfElements", pagedResult.getNumberOfElements());
                content.put("size", 10);
                content.put("empty", pagedResult.isEmpty());
                content.put("pageable", new int[]{});
                content.put("content", pagedResult.getContent());


                return content;
            }else {
                return new HashMap<>() ;
            }

        }

        @Override
        public Quiz getQuizById(int id) {
            return quizRepository.findById(id).get();
        }

        @Override
        public void insert(Quiz quiz, User user) {
            quiz.setUser(user);
            quizRepository.save(quiz);
        }

        @Override
        public void deleteQuiz(int id, String username) throws IllegalAccessException {
            if (quizRepository.existsById(id)) {
                if (quizRepository.findById(id).get().getUser().getEmail().equals(username)) {
                        quizRepository.deleteById(id);
                }else {
                    throw new IllegalAccessException("not allowed!");
                }

            }else {
                throw new IllegalStateException("No such quiz");
            }
        }

    }
  learner_created: true
- name: src/engine/SecurityConfig.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.NoOpPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;


    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        private UserDetailsService userDetailsService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth.userDetailsService(userDetailsService);
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http.csrf().disable().headers().frameOptions().disable();
            http.csrf().disable().authorizeRequests()
                    .mvcMatchers("/api/register").permitAll()
                    .mvcMatchers("/api/quizzes").authenticated()
                    .mvcMatchers("/actuator/shutdown").permitAll()
                    .anyRequest()
                    .authenticated()
                    .and()
                    .httpBasic();
        }



        @Bean
        public PasswordEncoder getPasswordEncoder() {
            return NoOpPasswordEncoder.getInstance();
        }
    }
  learner_created: true
- name: src/engine/UserRepository.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Service;

    import java.util.Optional;

    @Service
    public interface UserRepository extends CrudRepository<User, Long > {
        Optional<User> findByEmail(String email);
    }
  learner_created: true
- name: src/engine/UserController.java
  visible: true
  text: |
    package engine;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;
    import org.springframework.web.server.ResponseStatusException;

    import javax.validation.Valid;

    @RestController
    @Validated
    public class UserController {
        private final UserService userService;

        public UserController(UserService userService) {
            this.userService = userService;
        }

        @PostMapping("api/register")
        public void registerUser(@Valid @RequestBody User user){
            try{
                userService.addUser(user);
            }catch (IllegalStateException e){
                e.printStackTrace();
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }

        }
    }
  learner_created: true
- name: src/engine/QuizRepository.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.data.repository.PagingAndSortingRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface QuizRepository extends PagingAndSortingRepository<Quiz, Integer> {


    }
  learner_created: true
- name: src/engine/Quiz.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import javax.persistence.*;
    import javax.validation.constraints.Min;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Size;
    import java.util.List;


    @Entity
    public class Quiz {
        @NotEmpty
        private String title;
        @NotEmpty
        private String text;

        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Integer id;


        @JsonIgnore
        @ElementCollection
        private List<Integer> answer;

        @NotNull
        @Size(min = 2)
        @ElementCollection
        private List<String> options;

        @ManyToOne
        @JoinColumn(name = "userId", nullable = false)
        private User user;

        public void setUser(User user) {
            this.user = user;
        }


        @JsonIgnore
        public List<Integer> getAnswer() {
            return answer;
        }


        public Quiz() {

        }


        public void setTitle(String title) {
            this.title = title;
        }

        public void setText(String text) {
            this.text = text;
        }

        @JsonIgnore
        public User getUser() {
            return user;
        }

        @JsonProperty
        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public String getTitle() {
            return title;
        }

        public String getText() {
            return text;
        }

        public List<String> getOptions() {
            return options;
        }

        public Integer getId() {
            return id;
        }
    }
  learner_created: true
- name: src/engine/Completed.java
  visible: true
  text: |
    package engine;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import javax.persistence.*;
    import java.sql.Date;

    @Entity
    public class Completed {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private int completedId;


        private int id;

        @JsonIgnore
        private Long userId;

        public int getCompletedId() {
            return completedId;
        }

        public void setCompletedId(int completedId) {
            this.completedId = completedId;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public Long getUserId() {
            return userId;
        }

        public void setUserId(Long userId) {
            this.userId = userId;
        }

        public Date getCompletedTime() {
            return completedTime;
        }

        public void setCompletedTime(Date completedTime) {
            this.completedTime = completedTime;
        }

        private Date completedTime;






    }
  learner_created: true
- name: src/engine/QuizController.java
  visible: true
  text: |
    package engine;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;

    import javax.validation.Valid;
    import java.util.*;
    import java.util.concurrent.ConcurrentHashMap;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    @RestController
    @Validated
    public class QuizController {
        QuizService quizService;


        public QuizController(QuizService quizService) {
            this.quizService = quizService;
        }

        public volatile static ArrayList<Quiz> quizzes = new ArrayList<>();

        //Quiz quiz = new Quiz("The Java Logo", "What is depicted in the Java logo?", new String[]{"Robot", "Tea leaf", "Cup of coffee", "Bug"}, 2);
        HashMap<String, Object> responseSuccess = new HashMap<String, Object>(

                Map.of("success", true, "feedback", "Congratulations, you're right!")
        );
        Map<String, Object> responseFailed = new HashMap<String, Object>(

                Map.of("success", false, "feedback", "Wrong answer! Please, try again.")
        );

    //  @GetMapping("/api/quiz")
    //  public ResponseEntity<Quiz> getQuiz(){
    //        return new ResponseEntity<>(quiz, HttpStatus.OK);
    //  }

        @PostMapping("api/quizzes/{id}/solve")
        public ResponseEntity<HashMap<String, Object>> postAnswer(@PathVariable long id, @RequestBody HashMap<String, Integer[]> answer) {
            Integer[] receivedAnswer = answer.get("answer");

            try {
                Quiz gottemQuiz = quizService.getQuizById((int) id);
                if (receivedAnswer.length > 0) {
                    return (Arrays.asList(receivedAnswer).equals(gottemQuiz.getAnswer())) ? new ResponseEntity<>((HashMap<String, Object>) responseSuccess, HttpStatus.OK) : new ResponseEntity<HashMap<String, Object>>((HashMap<String, Object>) responseFailed, HttpStatus.OK);
                } else {
                    return gottemQuiz.getAnswer().size() == 0 ? new ResponseEntity<>(responseSuccess, HttpStatus.OK) : new ResponseEntity<>((HashMap<String, Object>) responseFailed, HttpStatus.OK);
                }
            } catch (Exception e) {
                System.out.println("exception: " + e.getMessage());
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
        }

        @PostMapping("api/quizzes")
        ResponseEntity<Quiz> addQuiz(@Valid @RequestBody Quiz quiz, @AuthenticationPrincipal UserDetailsImpl user) {
            quizService.insert(quiz, user.getUser());
            return new ResponseEntity<Quiz>(quiz, HttpStatus.OK);
        }

        @GetMapping("api/quizzes")
        ResponseEntity<HashMap<String, Object>> getAllQuizzes(@RequestParam(defaultValue = "0") Integer page) {
            HashMap<String, Object> content = quizService.getQuizzes(page);


            return new ResponseEntity<HashMap<String, Object>>(content, HttpStatus.OK);
        }

        @GetMapping("api/quizzes/completed")
        public ResponseEntity<HashMap<String, Object>> getCompleted() {


        }


        @GetMapping("api/quizzes/{id}")
        public ResponseEntity<Quiz> getQuizById(@PathVariable long id) {
            try {

                Quiz gottenQuiz = quizService.getQuizById((int) id);

                return new ResponseEntity<Quiz>(gottenQuiz, HttpStatus.OK);
            } catch (Exception e) {
                System.out.println("Exception occured: " + e.getMessage());
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }

        }


        @DeleteMapping("api/quizzes/{id}")
        @ResponseStatus(value = HttpStatus.NO_CONTENT)
        public ResponseEntity<HttpStatus> deleteById(@PathVariable int id, @AuthenticationPrincipal UserDetails user) {
            try {
                quizService.deleteQuiz(id, user.getUsername());
            } catch (IllegalStateException e) {
                e.printStackTrace();
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            } catch (IllegalAccessException e) {
                e.printStackTrace();
                return new ResponseEntity<>(HttpStatus.FORBIDDEN);
            }

            return new ResponseEntity<>(HttpStatus.NO_CONTENT);

        }

    }
  learner_created: true
- name: src/engine/UserService.java
  visible: true
  text: |
    package engine;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;

    @Service
    public class UserService {
        @Autowired
        private UserRepository userRepository;

        public void addUser(User user){
            var duplicateEmail = userRepository.findByEmail(user.getEmail()).isPresent();
            if (duplicateEmail){
                throw new IllegalStateException("duplicate email");

            }else {
                userRepository.save(user);
            }
        }
        public User updateUser(User user){
            return userRepository.save(user);
        }
    }
  learner_created: true
- name: src/engine/Content.java
  visible: true
  text: |
    package engine;

    import java.util.List;

    public class Content {
        public int totalPages;
        public int totalElements;
        public boolean last, first, empty;
        public String[] sort = new String[]{};
        public String[] pageable = new String[]{};
        public List<Quiz> content;
        public int number;
        public int numberOfElements;
        public int size;

        public Content() {

        }

        public Content(int totalPages, int totalElements, boolean last, boolean first, boolean empty, List<Quiz> content, int number, int numberOfElements, int size) {
            this.totalPages = totalPages;
            this.totalElements = totalElements;
            this.last = last;
            this.first = first;
            this.empty = empty;

            this.content = content;
            this.number = number;
            this.numberOfElements = numberOfElements;
            this.size = size;
        }
    }
  learner_created: true
- name: src/engine/User.java
  visible: true
  text: |
    package engine;

    import javax.persistence.*;
    import javax.validation.constraints.*;
    import java.util.List;

    @Entity
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.AUTO)
        private Long id;


        @NotNull
        @NotBlank
        @NotEmpty
        @Email
        @Pattern(regexp = ".*\\..*")
        @Column
        private String email;

        @NotNull
        @NotBlank
        @NotEmpty
        @Size(min = 5)
        private String password;

        public String getEmail() {
            return email;
        }

        @OneToMany(mappedBy = "user" )
        private List<Quiz> quizzes;

        public String getPassword() {
            return this.password;
        }

        public List<Quiz> getQuizzes() {
            return quizzes;
        }

        public void setQuizzes(List<Quiz> quizzes) {
            this.quizzes = quizzes;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public Long getId() {
            return id;
        }
    }
  learner_created: true
- name: src/engine/CompletedRepository.java
  visible: true
  text: |
    package engine;

    import org.springframework.data.repository.PagingAndSortingRepository;

    import java.util.List;

    public interface CompletedRepository extends PagingAndSortingRepository<Completed, Integer> {
        List<Completed> findByUserId(Long userId);
    }
  learner_created: true
- name: src/engine/CompletedController.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/8257#comment
status: Solved
record: -1
